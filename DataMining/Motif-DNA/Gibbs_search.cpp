#include <cstdlib>
#include <iostream>
#include <cstdio>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <ctime>
#include <random>

using namespace std;
string DNA[30]={
"CATGTCTCCAACCACAGTCTTTTGTTTCCTTACAAAAGGCAGATCCAATGTCCTCTTTGTTTAGCACCTGAAACAAAGCACCTGAAAAGCAGGTCCATAATTGGGATTTGGGGCACTGGACCCAGAAACAATACATCAGGGTAGTTCTTTATGGTGGAATTTTGCTAAAAGGTTCTGTTTCATCTTTATATGAGTATGGTAGACTAATTTGTGAGATAATATTTTGGCCGTAAGCACATTTTCTGCAAGTAAATAAGAAATCAGGTATTACACAAGTGAC",

"TTTGAAGCTACTGCTCTGTGTTCTCTTTGCTATCAGTTTTAATAACTGTTTTTAAGACACCATGTTTTGAAAAGAGCTTTGTTTTTCTCAGCTCTTTCTCTCATCTGCTACATTTTGTAAGAAAGCCATAATCTCATGTTTATGATATTAATTATTGTGGATGTTATGTTATGTTATCAATGCTGTACTGAGACAGTACGGGTCAATAAAAGGATTTGAAATATGAGTATTAAACTACAGTAAGCATTTTTAAAAAGTAAAACGTCTCATAAATAGAATC",

"AGTTTTAGAATTAATACATACTCACCTTTGTACTCACTTATTGTTTAGCTGTAGGTACATTTTAAAGAATTAGGCCAAAGCAAACTCTATTTGAAAACACCTATTATTTGGAAAATGAAATTATATACAAATGATAAGATTATTATATTTTAAAGTAACCTCCCTTGCATGTCTCAGCATAAAGTATTTTTTTATGAAAGTAATTGACCTCTCTTCCTCCTCAGAATACTAGATAAGTACCACAGGTTGTGGGGGTGTGTGTGTGTTTAATTAATATGAG",

"AGGAAAGACAGAGCCCTTTAATAGAAGACTCTTCTGCCTTAAATAATAATTTTCTTAAAGCCTTTTATTCCTGCCACTTGAATGAAAGGAAAGAATGCCTTTCTTTCTTATCATCTCCTTGCTTTCCTGGTTCCTCAATTACCAGCTCCCAGCTCCTACTTCTTCTGCCATAGCAGACTATATTGACATGGCTCCATTACCAGCAGACCACTCCCTCCCACAATGCACCACAGTGCTTTCAACCCACTGGATTTCCCACAGGTCAAATTAGAAAGGACTT",

"GGATCAGAGAAGGGCACTTCTCATGGGCCATAATGTGAATTTTGACTAATGGTAAATGAAGGATGAAACTAGTTTGAGAAGAAACATGTCAGACAAGTTTTCCTCAGATGGCAAGCTAATGTTTTTACAGCATTTTTTCCATCATTACAGTTCTCTCATTCCTGTTTTGATACCACCAACTTGACTTATTGCCTGATTCTTGTCCCTGGTTTTGCCTCTTTGTTGCTCTTTTTCACTCTGTCCTCTCAGTCATCAAAGGAGAGGGAAAAGCAGTCTATTT",

"ATTTGAGAGATTTCACCTAGATTATTCAGCAAATGCTTTCATTAGGCTGTATTTGTCAGTCCACTCTCTTATCTTATTTTCCTCAGTGAGCTCCTTGAAGTTCCCTCAGTGAGCTCCTTGAAGGAAACTCCTATTTTTCAACATATGACTGGCTGTAATTTTTCAACATTACAGGCTGGCACTTAGCATATCATCAGTGCTTAATAAATTTTTTTTTTTTGGTCATACAAACTTAATTAATAGGATGTGTAATGTGTCCTGGCCTCTGAAAAAACTGTGT",

"CATCATTGGGCTATTGTCAGCTGGGAGAAGTTGAGAAGTCCTATGGACTCTGAGGCAAAGGCACCTCCCACTTGCTTGGGAATGATGGGTTGGAGGTGGTGAAATTATCAGTGATCAAAGACATGTCTATTGCTTCCCATTTGCCCATCAAAAATAAGCCAAGGCCAGCAAGAATGAAGAGTTGCATGAGTCATCAGACGCTGGTGAAAATGATAGAATTTGAAGCTTCAAAGTAATCCATAAGCTTAATCAACAAAATACTAAATTTTGCTAGTGATAA",

"TGCTAAAATTTAGCTTTTTGCTATTATTATTAAGAAAAATAATAGTATTTTGAAATGAGGCACTTGATTGCACCTAGGTCTTTGTTTTCTTTGTAAGATTGCCTAAAACCTATCTGCTGCCTGTATTTAAAGGAGTAGTTACAACGTCCCTCCAGCCTCTCTGTAGGAGACAGAGACAGGAAATCTGCCCCAGGTCTGTGTGTGGGCTCCACAGACACTGCCAATACAGGAGTGCTGAACTCACAGCTGAGTCACATTGCTGTCCACACTACATAAATTA",

"TTTAAGACTTCAAAGGGAGAATATGATAGTGTAATGAATTTAAAATTCACAATGTACAACTGAAGTGAGAAGAAATGTATTTTAGTTTACTTCTCCATAGTGGAATTCAATTTAACTTTAAAGTTTCCATTTTCAACGACAGAGGTAAACTCAGCCTTGTCACTCTCAAGGTAACTGTGTCATTGCAGTTTCAAGGTTAGTCTCTTGGAGTAAATATTCAGTCAAATTAAAGATTTAAGCTCAGTAAGTTGGAGCTCAAATTCAATACATGAGCTGCAAT",

"CCACTCTCAAGGATTCTCGTCTTCTCTTTCCCCTCAGGATATATCTGTGTACAGGGGTTCGTCTGGCTGTGCCCCAGATGCTTGTGTCCTTGCTGCAGCTGAAGGTTTTACAGCTGGTAACTTGTAGCCTGTTGTCTAAATGTGATAAAGGCCCACTATGGCCACCCCCATTCAGCCCCTTCTGGCTCAAATGAAGCTTGGAGACTCAACCTCACATTGATCTTTTCGGCTTCCCACCCTAGAGCCTGGGCTATAGGTCACCATGCTCCAAGGTGAGATG",

"GCCCCTGTCATGCCTATTGCTGGACCTATTGGAAAGCTCAGTGTGCTTCCGCCATGTTCAGGCTGTGGGCACTGTGTCCAGCCTTCTCTCTACTTAACCTTCCATTTCTACTCAGTTTGGCAAGGAGCACGCTGTCGGGTGATTTCCTCCCAGGGTTCCAGAGAAGAGAGTCAAATGTTCCCCCTGCTCTAGGCTTTCCAAGTTCATCTAGGGGTATCTATCTCCTACAGCGAGGCTGCGGAAAGGTTGTAACTACTTCAAATACAGACAGCAGATAGGT",

"TTTAGTGCAATCTTACACAGAAAGCAAAGATCTAGGTGCAATCAAGTCTTTTATTTTAAAATACTACTCTTTTTCTTAATAACAGCAAAAAATCTAAATTTTGGCATTATTCCTGGCAAAATTTAGTATTTTCTTGATTGAGATTATAGATTACTTTGGAGCTTCAAATTCTGTCATTTTCATCAGCATCTGATGACTCATGCAATGCTTCGCTCTTACTGGCCTCAGCTTATTTTCAATGAACAAAAAGGCAGCAATAGAATCTCTTTGATCACTGATA",

"ATTTTATCACCTCTAAGCCATCATTCCCAAGCAAGTGGGAGGTGCTCCTGAAAGAAAGTTGTGACTGGGAACTAGGCCAGGACGCTTTGGAAATGGGGTGGTTGTAGGGGGATGGTAGGGCACATTGAGGCCAGAAAGATACTTTTTCCTCAACAGTGAATGAATTGGCTACATTGTCTGGAAGACCCTCAAGTGTCACCAGGAGCTGTGTTTCTTGAGAGCAGTGTCCTGAGGCAGCCAGCCTGAGTCAACTTGAAATTCTATGGAGACCTGGAAGTAT",

"CTTTGGTTTCCATGGCCAGAGGCACAGAACACCTGGAGCTTCCCCCTTCTCCACTTCCTGCCTCCTAATCCCCACCCCCTGTGCTGACAGTCTGCTTTACACTGGTTCACTACCACTGTCATGTTTGTAGTGTTCGGCATCATGAGACATGCCTGAAAGAGATTATTATGGCAAAGATAAGGACAGGCAGCAGACTACTACATGTGTAGTTCCAAAGTGAAATCATCAACCTCCATCTGACTGACCAAGTTCGTTACATACAAGGAGAACTAGAGTGGTT",

"GCCTACCTCTAACCAGACACAGAAGACTTTGGTCTGCAGATGGCAACAGAGTCCACACCAGAATCCAACTTCCACCCAAAGCCTGGGCAACATCTAGTGATGCTGCTGCTGCTCTCCTGGTTTTAGCAGGAGGATTTTCTTTGTTGTCCCCAGTCCCATGACACAGCTCCCCTGTGTCTTGGAGCAGGGGTCTCCTGCAGTGTGTACCCCACAATGGGGCTTGGAGCTTAAAAAGTCCCCATCTCCAGGCAGATTGACTTCAGATGAGAATGAGAAGGAA",

"GCCTAAACATTTCAGGCATGAGATGCTGTGCCAATTATCAATTTATTACCTGTCCATTCTGAACTCACCCTTCACTGCCTGCTCTGCAATAATGGAGTTAGACTCAGTATTTCTCTTCTGCTAGTTAGCATGATGTTCGTCGGTAGAGGGTGCTAGAAGGTCACTGGAGGAAGAAGGGATTTCTTGTCCTTTTCTGGTGTGCACCTCTCAGCAAGCTCCTACAGTACCCACTGGCTTACACAGCATCAGCTCCTCCAGTGCACAGGGGATAGCAGTGTCC",

"AGCAGCCAGCAGTAAGTGCTACCTCCCCAGGGGCATCGTTCCCTATCACCTTCTCAGGCTGCTTTGCAATGGAGTACCCTAAGCTCAGCACTTCCCCAGAAATGTCTCCCCAAAAATCCTCTCACAGAGCTTTGCAATGAGATCCAAGGCATGGCACCTCCCCATGGGGAGCTTCCCCTGGTAATCTAGAGGGTGGATTCCCAGGTAGTCCCACCAGCAGAGGACCTCAGCAAACCTCTTCTCCATCCAGTGAGCCATGGTTGCACCCTCTACCAATGAG",

"GTCTGGATCTGGATCTCAGCCCAGGATGGAGGAGTCTCTTCCTTGGATGCTCTAGCTCAGCCCTGAGTTGTAGCTGCTCTCCATTAGGTTGCTTTCGGCCTTAAAGTTATTTTTACCTTTGACTAGCTAATCTCCTCTTACTCTAATCTTTTGTTAAAGTTAATAGTTCTCTATTTCAATTTCTGATGTTCAAATTACTATGTGGTGTCTGTCTTCTGATTGAACTCCGAACTAACACCAATGCCAAAATGCAAACATACACAGCTACACCTGCTCCTAA",

"GCCCCCTGAAGATAAACACACACACACACACACACTTTGAAATAGGGCAGAAGAGACTTAGGAGACTCATGTGAGCTCAGCTTTACTAACAAAAGATATTTTCCAAAAGGAAGTGAAAAGCACCTAAGAAGGCAGAGTGAAACTTAGACCACACACACACACACACACACACACAAAAAAAAAAAGAAACTGCCCAGCCCTCTTCAGGAACATAGAGATAGGCACTAAGTTGCCATCCATGGAGACATAAATGAAGAGCTACTCACTCACTGCTTTGCAC",

"TTTATAAGGATGTTGGAAGGTCTTCAAGTCAGAGGGCAGAAATAAAGCCCAGGACTCACCAGTGAGCCCTCAAAATATGAGTTCTATTCTACTGATGGGGAATATTGGTTAGCCCCTTAATCCTGAATCCAGTTCTGCCTCATTAGACAAGGAGGAAACCCCGGGTCCCTGGTGTCTAGGACCCCAGACTACCATCACCCTGCTGCCAATAGTGCTTCACCCAACTCCCACTGCCCACTCTCTTGACCCACAAGGCATACCTGGGAGTTGACCCAACCCT",

"TTTATCAATCCGGCCTTCCCATTTTTCTTTGGCACCATCCCTGTGCTTTGGGTTTTAGGGGTTTTAGTGCCTTCCTTTCCTCTTTTCTCTTATCTCATCCTCCTTGATGGGGGGACTGGAAGAGGCACAATACAATTTCTAAATATATTTGTTTTAAAAAAACACTATAAATAATTATGAGGTAGAAATCATAAAAGCATGGGTTCAAAATGAATAAAAATGCCAACTCCCATAATGTTATGTAAATAGGTACTTGTAGCTTATGATAAAATTGCTGAAG",

"ACAGCTTCTTGCTGGGATTCAAAAAGTGCTGTATTTCAAATAACAGATCGAATGAAACAAAGCTGATGTGCTTGGAAAAAACCGGGGTAAGATGACACCAGCGTGGTTCTAGTGTTGGCAAAGATTATAATGCTGAAGATACATGCAAGGAACTTAAGTAAAACTAGGTCATAATATGTGAGACAGAAAAACTCTAGAACATTCTTAAATGCACATGTCATTTTATATGATATGGGATTTTAATAAATAATAGTTAATTATAACAAAGTTTTTAGAAACA",

"GACATTTGACTGTTTTGACTATATCCTTAGAAGTGTGTATTGTTTCCAAGTTGGCCTATCATTTTTTAGTCGCTTTTTTGGAAAAAAAAAAAAAAGGAAGGTCTCCTCATATTCAGGATTGCCTAGTGTTCAGGCACATGAGGACTACCATGAGCCTGGTAGCTAGTAGTCAGACAATAACCTGTCTCTTTCAGTTCAAGGTAAAGCAAGCCTATGCTTGAGCCTCCCTCAAAGCTTCCTGCTTTAGGAATTTACTCATCTCTCAGAACTGGTGAGAACA",

"GTGTCTGGCTCTCTGAGATACTAGCTTTCCTCCCTAGAAAAGTAGTTGGTAGCCCCTAGCATTGAAGTCTCTTTTAAAAATTCGAACACAACCCATATACATACATACGGTTAATTGGCTTTCAACAAAGGTGCAAAATCAACTCAATGGAGAAAGAAGATTCTTAAATGATAATCACAAATGATTATGGAACAATTGGACATCTATATACTAAAAAAGAGAGAACCTTAGCCCTTATCTTGTACCACACACAAAAATTAAGGTAAAAATAGATCATTAA",

"CCTAAATGTACAACATGTAACATGTCTAGAAAAAGTCACAGGAGAAAAATTTTGTGACCTTGGGTTAGGCAAAGATTCATTAGATACAACACCTATAACATGATCCACAAAAGAAATAAAAGCTGATAACCTGGACTTCATTAAAACTTAAAACTTCTACTCTTGAAAAGACACTGTTAAAAATATAAGCTACAGACTGTGAGAAAATATTTATAAAATACATATTCATTAAAAGACATATTTCCAAAATACATAAAGAGCTCTCTCAACTCAGTAGGTT",

"TTTAAAATCCCATTTAGAAATAGGCAAAAATTTGAACAGACACTTCAACAAATTAAATACATAGATGGCAAATAAGTACATGAAAAGATGCTCATCATTTAAGATATGTGATTGGCAGTTTCTTATAAAGTTAAATATACACTTACCGTATGACCCAAAAATCCCATTCCAAGGTATTTACTCAAGAGAAATGAAGACATATACCCACTCAAAAAACTGTACACAAATATTTATAATGGATTTATTAATAATCACCCCAAACTGAAAACACCCAAATATT",

"TTTCAACCAGTGAATGGGTAACAAACAATCGTACATCCGTATAATGCAGTAAATAGACAGGAAATACTAAACATGCAACAACACGGGGGAATCTCCAATACATTATGCTAAGTGAAAGAAGCTGGACTCATAAGGTATAGGACAGTCTGCAAAAAAACAAAATAAGAGGGATAGAGAAGTAATCAGTGGTTGCCAGCAGCTGGAAATGGGGAGGGGTTGACCACGAATAGGCTCAAGTGAACATTTGGGTATGACAAAAAAGTTCTATATCTTGATTGTG",

"GTGGTGGTTACATGACTGTCTGCATTTGTCAAAGCTTATTAAACTATACTTTTAAATGGTGAATTTTGCTGTGTATAAATTACAGCTCAATTTAAAAAAACAAAAACAAAAACAAAAAACTCTGACCCAGATCACTGTGGTCATTGTTGGTGGAGACTGCTGGCCTCTTAGCTCTCTTATGAGTGGGGTTACCAGCTAATCCCTGACATATTTGTGGTTCCAGGACTCCTAAAGGGTTGTGCAATGGTTTGTCTCCTTTCTCAAAGACAGCTGCTGGCTG",

"ATGGTAAAAGATAAAGAGAAAGAAAGATGTACACAGGCAAGTCAGGGAGAAATTTATCTTTCTTTTCCTTCCTGTCTTTCTTTTATATTCTTCCTCCCTCTTCTATTTCCTGCAGCCCTTATTTTTCTTTCACTTACTTTTCCTATTTATTCATCAGCTGAAACCTTGCTGAAAGGGATTAGCTGGGGGCTAAGTCGAGTAGGGCAAAAGGAAGCATTTGCTTCTAATCAGTAGTACACTGGTAAATGATTAGTAACCAGCTCTCTGAAACACCCACACA",

"CACACACAAACACACACACACACAAACACACACACACACAAACTAAAGTTTCTTTTAAATTTTACTGATATGAAGAGTATATAGCACAGGCTGGGTGCAGTGGCTCACGCCTATAATTCCCAGCAATTTGAGAGGCTGAGGCAGGTAGATCACTTGAAGTCAGGAGTTCAAGACCAGCCAAGGCAACATGGCAAAACCCCATCTCTAATAAAAAAAAAAAAATACAAAAATTAACTGGGCATGGTGGCACACGCCTGTAATCCCAGCTACTCAGGAGGCT",

};
map<char,vector<float>> create_profile(vector<int> start,int len,int seq_tobe_removed,map<char,vector<int>> &map_int){
	map<char,vector<float>> map;
	std::vector<float> a(30,0.0);
	map['A']=a;
	map['T']=a;
	map['G']=a;
	map['C']=a;

	map_int.clear();
	std::vector<int> b(30,0);
	map_int['A']=b;
	map_int['T']=b;
	map_int['G']=b;
	map_int['C']=b;

	for(int i=0;i<len;i++){
		for (int j = 0; j < 30; ++j)
		{
			if(j == seq_tobe_removed) continue;
			map[DNA[j][i+start[j]]][i]++;
			map_int[DNA[j][i+start[j]]][i]++;
		}	
		for(auto k = map.begin();k!=map.end();k++){
			k->second[i] /= 29.0;
		}
	}	
	return map;
}

map<char,vector<int>> create_profile(vector<int> start,int len,int seq_tobe_removed){
	map<char,vector<int>> map;
	for(int i=0;i<len;i++){
		for (int j = 0; j < 30; ++j)
		{
			if(j == seq_tobe_removed) continue;
			map[DNA[j][i+start[j]]][i]++;
		}	
	}	
	return map;
}

int Score(vector<int> start,int len,string &s){
	s.clear();
	map<char,vector<int>> map;
	std::vector<int> a(30,0);
	map['A']=a;
	map['T']=a;
	map['G']=a;
	map['C']=a;
	int score=0;
	for(int i=0;i<len;i++){
		for (int j = 0; j < 30; ++j)
		{
			map[DNA[j][i+start[j]]][i]++;
		}
		int max = 0;
		char max_char;
		for (auto k = map.begin(); k != map.end(); ++k)
		{
			if(k->second[i] > max){
				max = k->second[i];
				max_char = k->first;
				
			}			
		}
		s.push_back(max_char);
		score += max;
	}
	return score;

}

map<char,vector<float>> create_Q(vector<int> start,int len,int seq_tobe_removed){
	map<char,vector<float>> res;
	vector<float> l(30,0.0);
	res['A']=l;
	res['T']=l;
	res['G']=l;
	res['C']=l;
	for(int i=0;i<30;i++){
		if (seq_tobe_removed == i)	continue;
		for(int j=0;j<251;j++){
			if(j == start[i]){
				j+=29;
				continue;
			}
			res[DNA[i][j]][i]++;
		}
	}
	for(auto k = res.begin();k!=res.end();k++){
		for (std::vector<float>::iterator i = k->second.begin(); i != k->second.end(); ++i)
		{
			*i /= 250.0*29.0;
		}
		
	}
	return res;

}

int get_new_start_position(map<char,vector<float>> P,int seq_tobe_removed){
	float max_P = 0.0;
	int new_pos;
	for(int i=0;i<251;i++){
		float temp_P = 1.0;
		for(int j=0;j<30;j++){
			temp_P *= P[DNA[seq_tobe_removed][i+j]][j];
		}
		if(temp_P > max_P){
			max_P = temp_P;
			new_pos = i;
		}
	}
	return new_pos;
}

int main()
{
	default_random_engine random_engine(time(NULL));
	clock_t t = clock();
	

	//---------------------Greedy search 计算consensus------------------START
	//Randomly choose starting position
	vector<int> start_position(30);
	for(int i=0;i<30;i++){
		start_position[i] =  random_engine()%250;	
	}
	map<char,vector<float>> P; //profile矩阵
	map<char,vector<int>> P_int;//没有除以29的profile矩阵
	map<char,vector<float>> Q;
	vector<int> scores(30,0);//每条序列的得分
	string motif;
	int max_score = 0;
	int round=1;
	do{
		
		max_score = Score(start_position,30,motif);
		//Randomly choose a sequence
		int seq_tobe_ingored = random_engine()%30;

		//Create profile P in remaining sequences
		P = create_profile(start_position,30,seq_tobe_ingored,P_int);

		//Create Q
		Q = create_Q(start_position,30,seq_tobe_ingored);
		
		//更新start_postion
		start_position[seq_tobe_ingored] = get_new_start_position(P,seq_tobe_ingored);

		//根据P_int得到每个子串的score
		for(int i=0;i<30;i++){
			int temp_score=0;
			for(int j=0;j<30;j++){
				temp_score += P_int[DNA[i][start_position[i]]][j];
			}
			scores[i] = temp_score;			
		}

		//打印输出结果
		cout<<"Round"<<round++<<endl;
		for(int i=0;i<30;i++){
			cout<<"start pos:"<<start_position[i]<<"\tSequence:"<<DNA[i].substr(start_position[i],30)<<"\tit's score:"<<scores[i]<<endl;
		}
		cout<<"-------------------"<<endl;
		cout<<"best_score:"<<max_score<<"motif:"<<motif<<endl<<endl;
	}while(Score(start_position,30,motif) > max_score);
	

	t = clock() - t;
	printf ("totally %f seconds.\n",((float)t)/CLOCKS_PER_SEC);
	//---------------------Greedy search 计算consensus------------------END



	return 0;
}	